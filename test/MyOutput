
truffle(development)> PubContracts.abi
[ { constant: true,
    inputs: [],
    name: 'getSubscriptionDetails',
    outputs: [ [Object], [Object], [Object] ],
    payable: false,
    stateMutability: 'view',
    type: 'function' },
  { constant: true,
    inputs: [ [Object] ],
    name: 'subscriptions',
    outputs: [ [Object], [Object], [Object] ],
    payable: false,
    stateMutability: 'view',
    type: 'function' },
  { constant: false,
    inputs: [ [Object], [Object], [Object] ],
    name: 'addSubscription',
    outputs: [ [Object] ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function' } ]
truffle(development)> PubContracts.address
'0x396474e12e54eef693c6045d4c366c57478c401f'

truffle(development)> PubContracts
{ [Function: TruffleContract]
  _static_methods:
   { setProvider: [Function: setProvider],
     new: [Function: new],
     at: [Function: at],
     deployed: [Function: deployed],
     defaults: [Function: defaults],
     hasNetwork: [Function: hasNetwork],
     isDeployed: [Function: isDeployed],
     detectNetwork: [Function: detectNetwork],
     setNetwork: [Function: setNetwork],
     resetAddress: [Function: resetAddress],
     link: [Function: link],
     clone: [Function: clone],
     addProp: [Function: addProp],
     toJSON: [Function: toJSON] },
  _properties:
   { contract_name: { get: [Function: get], set: [Function: set] },
     contractName: { get: [Function: get], set: [Function: set] },
     abi: { get: [Function: get], set: [Function: set] },
     network: [Function: network],
     networks: [Function: networks],
     address: { get: [Function: get], set: [Function: set] },
     links: [Function: links],
     events: [Function: events],
     binary: [Function: binary],
     deployedBinary: [Function: deployedBinary],
     unlinked_binary: { get: [Function: get], set: [Function: set] },
     bytecode: { get: [Function: get], set: [Function: set] },
     deployedBytecode: { get: [Function: get], set: [Function: set] },
     sourceMap: { get: [Function: get], set: [Function: set] },
     deployedSourceMap: { get: [Function: get], set: [Function: set] },
     source: { get: [Function: get], set: [Function: set] },
     sourcePath: { get: [Function: get], set: [Function: set] },
     ast: { get: [Function: get], set: [Function: set] },
     compiler: { get: [Function: get], set: [Function: set] },
     schema_version: [Function: schema_version],
     schemaVersion: [Function: schemaVersion],
     updated_at: [Function: updated_at],
     updatedAt: [Function: updatedAt] },
  _property_values: {},
  _json:
   { contractName: 'PubContracts',
     abi: [ [Object], [Object], [Object] ],
     bytecode: '0x6060604052341561000f57600080fd5b61057f8061001e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d5de6df1461005c5780632d5bbf60146101565780633dfaa86c146101b3575b600080fd5b341561006757600080fd5b61006f61020c565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156100ba57808201518184015260208101905061009f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561013e578082015181840152602081019050610123565b50505050905001965050505050505060405180910390f35b341561016157600080fd5b61017760048080359060200190919050506103c3565b60405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b34156101be57600080fd5b6101f260048080356000191690602001909190803560001916906020019091908035600019169060200190919050506103fc565b604051808215151515815260200191505060405180910390f35b6102146104ab565b61021c6104ab565b6102246104ab565b600061022e6104ab565b6102366104ab565b61023e6104ab565b60006102486104bf565b60008054905095508560405180591061025e5750595b908082528060200260200182016040525094508560405180591061027f5750595b90808252806020026020018201604052509350856040518059106102a05750595b90808252806020026020018201604052509250600091505b858210156103af576000828154811015156102cf57fe5b906000526020600020906003020160606040519081016040529081600082015460001916600019168152602001600182015460001916600019168152602001600282015460001916600019168152505090508060000151858381518110151561033457fe5b9060200190602002019060001916908160001916815250508060200151848381518110151561035f57fe5b9060200190602002019060001916908160001916815250508060400151838381518110151561038a57fe5b90602001906020020190600019169081600019168152505081806001019250506102b8565b848484985098509850505050505050909192565b6000818154811015156103d257fe5b90600052602060002090600302016000915090508060000154908060010154908060020154905083565b60006104066104bf565b8481600001906000191690816000191681525050838160200190600019169081600019168152505082816040019060001916908160001916815250506000805480600101828161045691906104ea565b9160005260206000209060030201600083909190915060008201518160000190600019169055602082015181600101906000191690556040820151816002019060001916905550505060019150509392505050565b602060405190810160405280600081525090565b6060604051908101604052806000801916815260200160008019168152602001600080191681525090565b81548183558181151161051757600302816003028360005260206000209182019101610516919061051c565b5b505050565b61055091905b8082111561054c576000808201600090556001820160009055600282016000905550600301610522565b5090565b905600a165627a7a72305820c5b6d19750e5dbad1e76ceacbdce56e00752a3bb719f84225e142f5d62acee980029',
     deployedBytecode: '0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d5de6df1461005c5780632d5bbf60146101565780633dfaa86c146101b3575b600080fd5b341561006757600080fd5b61006f61020c565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156100ba57808201518184015260208101905061009f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561013e578082015181840152602081019050610123565b50505050905001965050505050505060405180910390f35b341561016157600080fd5b61017760048080359060200190919050506103c3565b60405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b34156101be57600080fd5b6101f260048080356000191690602001909190803560001916906020019091908035600019169060200190919050506103fc565b604051808215151515815260200191505060405180910390f35b6102146104ab565b61021c6104ab565b6102246104ab565b600061022e6104ab565b6102366104ab565b61023e6104ab565b60006102486104bf565b60008054905095508560405180591061025e5750595b908082528060200260200182016040525094508560405180591061027f5750595b90808252806020026020018201604052509350856040518059106102a05750595b90808252806020026020018201604052509250600091505b858210156103af576000828154811015156102cf57fe5b906000526020600020906003020160606040519081016040529081600082015460001916600019168152602001600182015460001916600019168152602001600282015460001916600019168152505090508060000151858381518110151561033457fe5b9060200190602002019060001916908160001916815250508060200151848381518110151561035f57fe5b9060200190602002019060001916908160001916815250508060400151838381518110151561038a57fe5b90602001906020020190600019169081600019168152505081806001019250506102b8565b848484985098509850505050505050909192565b6000818154811015156103d257fe5b90600052602060002090600302016000915090508060000154908060010154908060020154905083565b60006104066104bf565b8481600001906000191690816000191681525050838160200190600019169081600019168152505082816040019060001916908160001916815250506000805480600101828161045691906104ea565b9160005260206000209060030201600083909190915060008201518160000190600019169055602082015181600101906000191690556040820151816002019060001916905550505060019150509392505050565b602060405190810160405280600081525090565b6060604051908101604052806000801916815260200160008019168152602001600080191681525090565b81548183558181151161051757600302816003028360005260206000209182019101610516919061051c565b5b505050565b61055091905b8082111561054c576000808201600090556001820160009055600282016000905550600301610522565b5090565b905600a165627a7a72305820c5b6d19750e5dbad1e76ceacbdce56e00752a3bb719f84225e142f5d62acee980029',
     sourceMap: '26:1195:0:-;;;;;;;;;;;;;;;;;',
     deployedSourceMap: '26:1195:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:678;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;55:35:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;190:345;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:678;593:9;;:::i;:::-;604;;:::i;:::-;615;;:::i;:::-;636:11;681:26;;:::i;:::-;741:23;;:::i;:::-;798:24;;:::i;:::-;862:6;902:39;;:::i;:::-;650:13;:20;;;;636:34;;724:6;710:21;;;;;;;;;;;;;;;;;;;;;;;;681:50;;781:6;767:21;;;;;;;;;;;;;;;;;;;;;;;;741:47;;839:6;825:21;;;;;;;;;;;;;;;;;;;;;;;;798:48;;869:1;862:8;;857:310;876:6;872:1;:10;857:310;;;978:13;992:1;978:16;;;;;;;;;;;;;;;;;;;;956:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:19;:28;;;1009:9;1019:1;1009:12;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;1078:19;:25;;;1066:6;1073:1;1066:9;;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;1130:19;:26;;;1117:7;1125:1;1117:10;;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;;884:3;;;;;;;857:310;;;1185:9;1196:6;1204:7;1177:35;;;;;;541:678;;;;;;;;;:::o;55:35::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;190:345::-;276:12;299:35;;:::i;:::-;371:9;344:15;:24;;:36;;;;;;;;;;;;;414:6;390:15;:21;;:30;;;;;;;;;;;;;455:7;430:15;:22;;:32;;;;;;;;;;;;;472:13;:35;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;491:15;472:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;524:4;517:11;;190:345;;;;;;:::o;26:1195::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o',
     source: 'pragma solidity ^0.4.0;\n\n\ncontract PubContracts {\n\n    Subscription[] public subscriptions;\n\n    struct Subscription{\n    bytes32 UserName;\n    bytes32 Topic;\n    bytes32 MailId;\n    }\n\n    function addSubscription(bytes32 _UserName, bytes32 _Topic, bytes32 _MailId) returns (bool success){\n        Subscription memory newSubscription;\n        newSubscription.UserName = _UserName;\n        newSubscription.Topic = _Topic;\n        newSubscription.MailId = _MailId;\n        subscriptions.push(newSubscription);\n        return true;\n    }\n\n    function getSubscriptionDetails() constant returns (bytes32[], bytes32[], bytes32[]){\n\n        uint length = subscriptions.length;\n\n        bytes32[] memory usernames = new bytes32[](length);\n        bytes32[] memory topics = new bytes32[](length);\n        bytes32[] memory mailids = new bytes32[](length);\n\n        for (uint i=0; i < length; i++){\n            Subscription memory currentSubscription;\n\n            currentSubscription = subscriptions[i];\n\n            usernames[i] = currentSubscription.UserName;\n            topics[i] = currentSubscription.Topic;\n            mailids[i] = currentSubscription.MailId;\n        }\n\n        return (usernames, topics, mailids);\n    }\n}\n',
     sourcePath: '/home/nagendra/solidity/Pubsubhandle/contracts/PubContracts.sol',
     ast:
      { attributes: [Object],
        children: [Object],
        id: 149,
        name: 'SourceUnit',
        src: '0:1222:0' },
     compiler:
      { name: 'solc',
        version: '0.4.18+commit.9cf6e910.Emscripten.clang' },
     networks: { '1510830094264': [Object] },
     schemaVersion: '1.0.1',
     updatedAt: '2017-11-16T11:01:44.707Z' },
  setProvider: [Function: bound setProvider],
  new: [Function: bound new],
  at: [Function: bound at],
  deployed: [Function: bound deployed],
  defaults: [Function: bound defaults],
  hasNetwork: [Function: bound hasNetwork],
  isDeployed: [Function: bound isDeployed],
  detectNetwork: [Function: bound detectNetwork],
  setNetwork: [Function: bound setNetwork],
  resetAddress: [Function: bound resetAddress],
  link: [Function: bound link],
  clone: [Function: bound clone],
  addProp: [Function: bound addProp],
  toJSON: [Function: bound toJSON],
  web3:
   Web3 {
     _requestManager: RequestManager { provider: [Object], polls: {}, timeout: null },
     currentProvider: Provider { provider: [Object] },
     eth:
      Eth {
        _requestManager: [Object],
        getBalance: [Object],
        getStorageAt: [Object],
        getCode: [Object],
        getBlock: [Object],
        getUncle: [Object],
        getCompilers: [Object],
        getBlockTransactionCount: [Object],
        getBlockUncleCount: [Object],
        getTransaction: [Object],
        getTransactionFromBlock: [Object],
        getTransactionReceipt: [Object],
        getTransactionCount: [Object],
        call: [Object],
        estimateGas: [Object],
        sendRawTransaction: [Object],
        signTransaction: [Object],
        sendTransaction: [Object],
        sign: [Object],
        compile: [Object],
        submitWork: [Object],
        getWork: [Object],
        coinbase: [Getter],
        getCoinbase: [Object],
        mining: [Getter],
        getMining: [Object],
        hashrate: [Getter],
        getHashrate: [Object],
        syncing: [Getter],
        getSyncing: [Object],
        gasPrice: [Getter],
        getGasPrice: [Object],
        accounts: [Getter],
        getAccounts: [Object],
        blockNumber: [Getter],
        getBlockNumber: [Object],
        protocolVersion: [Getter],
        getProtocolVersion: [Object],
        iban: [Object],
        sendIBANTransaction: [Function: bound transfer] },
     db:
      DB {
        _requestManager: [Object],
        putString: [Object],
        getString: [Object],
        putHex: [Object],
        getHex: [Object] },
     shh:
      Shh {
        _requestManager: [Object],
        version: [Object],
        info: [Object],
        setMaxMessageSize: [Object],
        setMinPoW: [Object],
        markTrustedPeer: [Object],
        newKeyPair: [Object],
        addPrivateKey: [Object],
        deleteKeyPair: [Object],
        hasKeyPair: [Object],
        getPublicKey: [Object],
        getPrivateKey: [Object],
        newSymKey: [Object],
        addSymKey: [Object],
        generateSymKeyFromPassword: [Object],
        hasSymKey: [Object],
        getSymKey: [Object],
        deleteSymKey: [Object],
        post: [Object] },
     net:
      Net {
        _requestManager: [Object],
        listening: [Getter],
        getListening: [Object],
        peerCount: [Getter],
        getPeerCount: [Object] },
     personal:
      Personal {
        _requestManager: [Object],
        newAccount: [Object],
        importRawKey: [Object],
        unlockAccount: [Object],
        ecRecover: [Object],
        sign: [Object],
        sendTransaction: [Object],
        lockAccount: [Object],
        listAccounts: [Getter],
        getListAccounts: [Object] },
     bzz:
      Swarm {
        _requestManager: [Object],
        blockNetworkRead: [Object],
        syncEnabled: [Object],
        swapEnabled: [Object],
        download: [Object],
        upload: [Object],
        retrieve: [Object],
        store: [Object],
        get: [Object],
        put: [Object],
        modify: [Object],
        hive: [Getter],
        getHive: [Object],
        info: [Getter],
        getInfo: [Object] },
     settings: Settings { defaultBlock: 'latest', defaultAccount: undefined },
     version:
      { api: '0.20.2',
        node: [Getter],
        getNode: [Object],
        network: [Getter],
        getNetwork: [Object],
        ethereum: [Getter],
        getEthereum: [Object],
        whisper: [Getter],
        getWhisper: [Object] },
     providers:
      { HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _extend:
      { [Function: ex]
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method],
        Property: [Function: Property] } },
  class_defaults:
   { from: '0x8d378315dba48778cee817953c868535a4646ad0',
     gas: 6712390,
     gasPrice: 100000000000 },
  currentProvider:
   HttpProvider {
     host: 'http://localhost:8545',
     timeout: 0,
     send: [Function],
     sendAsync: [Function],
     _alreadyWrapped: true },
  network_id: '1510830094264' }
truffle(development)> PubContracts.web3.toAscii
[Function: toAscii]
truffle(development)> pubsd.getSubscriptionDetails()
[ [ '0x4e6167656e647261000000000000000000000000000000000000000000000000',
    '0x4e6167656e647261000000000000000000000000000000000000000000000000',
    '0x4e6167656e647261000000000000000000000000000000000000000000000000',
    '0x4e6167656e647261000000000000000000000000000000000000000000000000' ],
  [ '0x546f706963310000000000000000000000000000000000000000000000000000',
    '0x546f706963310000000000000000000000000000000000000000000000000000',
    '0x546f706963310000000000000000000000000000000000000000000000000000',
    '0x546f706963310000000000000000000000000000000000000000000000000000' ],
  [ '0x4869000000000000000000000000000000000000000000000000000000000000',
    '0x4869000000000000000000000000000000000000000000000000000000000000',
    '0x4869000000000000000000000000000000000000000000000000000000000000',
    '0x4869000000000000000000000000000000000000000000000000000000000000' ] ]
truffle(development)> hex = "0x4869000000000000000000000000000000000000000000000000000000000000"
'0x4869000000000000000000000000000000000000000000000000000000000000'
truffle(development)> web3.to
web3.toLocaleString     web3.toString

web3.toAscii            web3.toBigNumber        web3.toChecksumAddress  web3.toDecimal          web3.toHex
web3.toUtf8             web3.toWei

truffle(development)> web3.toAscii(hex)
'Hi\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'
nagendra@nagendra-dsk:~/solidity/Pubsubhandle$ truffle.console
truffle.console: command not found
nagendra@nagendra-dsk:~/solidity/Pubsubhandle$ truffle console
truffle(development)> Pub
PubContracts     PubsubContract   PubsubContract1

truffle(development)> PubContracts.address
'0x396474e12e54eef693c6045d4c366c57478c401f'
truffle(development)> PubContracts.deployed().then(function(instance){pubsd1=instance;});pubsd1;
TruffleContract {
  constructor:
   { [Function: TruffleContract]
     _static_methods:
      { setProvider: [Function: setProvider],
        new: [Function: new],
        at: [Function: at],
        deployed: [Function: deployed],
        defaults: [Function: defaults],
        hasNetwork: [Function: hasNetwork],
        isDeployed: [Function: isDeployed],
        detectNetwork: [Function: detectNetwork],
        setNetwork: [Function: setNetwork],
        resetAddress: [Function: resetAddress],
        link: [Function: link],
        clone: [Function: clone],
        addProp: [Function: addProp],
        toJSON: [Function: toJSON] },
     _properties:
      { contract_name: [Object],
        contractName: [Object],
        abi: [Object],
        network: [Function: network],
        networks: [Function: networks],
        address: [Object],
        links: [Function: links],
        events: [Function: events],
        binary: [Function: binary],
        deployedBinary: [Function: deployedBinary],
        unlinked_binary: [Object],
        bytecode: [Object],
        deployedBytecode: [Object],
        sourceMap: [Object],
        deployedSourceMap: [Object],
        source: [Object],
        sourcePath: [Object],
        ast: [Object],
        compiler: [Object],
        schema_version: [Function: schema_version],
        schemaVersion: [Function: schemaVersion],
        updated_at: [Function: updated_at],
        updatedAt: [Function: updatedAt] },
     _property_values: {},
     _json:
      { contractName: 'PubContracts',
        abi: [Object],
        bytecode: '0x6060604052341561000f57600080fd5b61057f8061001e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d5de6df1461005c5780632d5bbf60146101565780633dfaa86c146101b3575b600080fd5b341561006757600080fd5b61006f61020c565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156100ba57808201518184015260208101905061009f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561013e578082015181840152602081019050610123565b50505050905001965050505050505060405180910390f35b341561016157600080fd5b61017760048080359060200190919050506103c3565b60405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b34156101be57600080fd5b6101f260048080356000191690602001909190803560001916906020019091908035600019169060200190919050506103fc565b604051808215151515815260200191505060405180910390f35b6102146104ab565b61021c6104ab565b6102246104ab565b600061022e6104ab565b6102366104ab565b61023e6104ab565b60006102486104bf565b60008054905095508560405180591061025e5750595b908082528060200260200182016040525094508560405180591061027f5750595b90808252806020026020018201604052509350856040518059106102a05750595b90808252806020026020018201604052509250600091505b858210156103af576000828154811015156102cf57fe5b906000526020600020906003020160606040519081016040529081600082015460001916600019168152602001600182015460001916600019168152602001600282015460001916600019168152505090508060000151858381518110151561033457fe5b9060200190602002019060001916908160001916815250508060200151848381518110151561035f57fe5b9060200190602002019060001916908160001916815250508060400151838381518110151561038a57fe5b90602001906020020190600019169081600019168152505081806001019250506102b8565b848484985098509850505050505050909192565b6000818154811015156103d257fe5b90600052602060002090600302016000915090508060000154908060010154908060020154905083565b60006104066104bf565b8481600001906000191690816000191681525050838160200190600019169081600019168152505082816040019060001916908160001916815250506000805480600101828161045691906104ea565b9160005260206000209060030201600083909190915060008201518160000190600019169055602082015181600101906000191690556040820151816002019060001916905550505060019150509392505050565b602060405190810160405280600081525090565b6060604051908101604052806000801916815260200160008019168152602001600080191681525090565b81548183558181151161051757600302816003028360005260206000209182019101610516919061051c565b5b505050565b61055091905b8082111561054c576000808201600090556001820160009055600282016000905550600301610522565b5090565b905600a165627a7a72305820c5b6d19750e5dbad1e76ceacbdce56e00752a3bb719f84225e142f5d62acee980029',
        deployedBytecode: '0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d5de6df1461005c5780632d5bbf60146101565780633dfaa86c146101b3575b600080fd5b341561006757600080fd5b61006f61020c565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156100ba57808201518184015260208101905061009f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561013e578082015181840152602081019050610123565b50505050905001965050505050505060405180910390f35b341561016157600080fd5b61017760048080359060200190919050506103c3565b60405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b34156101be57600080fd5b6101f260048080356000191690602001909190803560001916906020019091908035600019169060200190919050506103fc565b604051808215151515815260200191505060405180910390f35b6102146104ab565b61021c6104ab565b6102246104ab565b600061022e6104ab565b6102366104ab565b61023e6104ab565b60006102486104bf565b60008054905095508560405180591061025e5750595b908082528060200260200182016040525094508560405180591061027f5750595b90808252806020026020018201604052509350856040518059106102a05750595b90808252806020026020018201604052509250600091505b858210156103af576000828154811015156102cf57fe5b906000526020600020906003020160606040519081016040529081600082015460001916600019168152602001600182015460001916600019168152602001600282015460001916600019168152505090508060000151858381518110151561033457fe5b9060200190602002019060001916908160001916815250508060200151848381518110151561035f57fe5b9060200190602002019060001916908160001916815250508060400151838381518110151561038a57fe5b90602001906020020190600019169081600019168152505081806001019250506102b8565b848484985098509850505050505050909192565b6000818154811015156103d257fe5b90600052602060002090600302016000915090508060000154908060010154908060020154905083565b60006104066104bf565b8481600001906000191690816000191681525050838160200190600019169081600019168152505082816040019060001916908160001916815250506000805480600101828161045691906104ea565b9160005260206000209060030201600083909190915060008201518160000190600019169055602082015181600101906000191690556040820151816002019060001916905550505060019150509392505050565b602060405190810160405280600081525090565b6060604051908101604052806000801916815260200160008019168152602001600080191681525090565b81548183558181151161051757600302816003028360005260206000209182019101610516919061051c565b5b505050565b61055091905b8082111561054c576000808201600090556001820160009055600282016000905550600301610522565b5090565b905600a165627a7a72305820c5b6d19750e5dbad1e76ceacbdce56e00752a3bb719f84225e142f5d62acee980029',
        sourceMap: '26:1195:0:-;;;;;;;;;;;;;;;;;',
        deployedSourceMap: '26:1195:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:678;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;55:35:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;190:345;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:678;593:9;;:::i;:::-;604;;:::i;:::-;615;;:::i;:::-;636:11;681:26;;:::i;:::-;741:23;;:::i;:::-;798:24;;:::i;:::-;862:6;902:39;;:::i;:::-;650:13;:20;;;;636:34;;724:6;710:21;;;;;;;;;;;;;;;;;;;;;;;;681:50;;781:6;767:21;;;;;;;;;;;;;;;;;;;;;;;;741:47;;839:6;825:21;;;;;;;;;;;;;;;;;;;;;;;;798:48;;869:1;862:8;;857:310;876:6;872:1;:10;857:310;;;978:13;992:1;978:16;;;;;;;;;;;;;;;;;;;;956:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:19;:28;;;1009:9;1019:1;1009:12;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;1078:19;:25;;;1066:6;1073:1;1066:9;;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;1130:19;:26;;;1117:7;1125:1;1117:10;;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;;884:3;;;;;;;857:310;;;1185:9;1196:6;1204:7;1177:35;;;;;;541:678;;;;;;;;;:::o;55:35::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;190:345::-;276:12;299:35;;:::i;:::-;371:9;344:15;:24;;:36;;;;;;;;;;;;;414:6;390:15;:21;;:30;;;;;;;;;;;;;455:7;430:15;:22;;:32;;;;;;;;;;;;;472:13;:35;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;491:15;472:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;524:4;517:11;;190:345;;;;;;:::o;26:1195::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o',
        source: 'pragma solidity ^0.4.0;\n\n\ncontract PubContracts {\n\n    Subscription[] public subscriptions;\n\n    struct Subscription{\n    bytes32 UserName;\n    bytes32 Topic;\n    bytes32 MailId;\n    }\n\n    function addSubscription(bytes32 _UserName, bytes32 _Topic, bytes32 _MailId) returns (bool success){\n        Subscription memory newSubscription;\n        newSubscription.UserName = _UserName;\n        newSubscription.Topic = _Topic;\n        newSubscription.MailId = _MailId;\n        subscriptions.push(newSubscription);\n        return true;\n    }\n\n    function getSubscriptionDetails() constant returns (bytes32[], bytes32[], bytes32[]){\n\n        uint length = subscriptions.length;\n\n        bytes32[] memory usernames = new bytes32[](length);\n        bytes32[] memory topics = new bytes32[](length);\n        bytes32[] memory mailids = new bytes32[](length);\n\n        for (uint i=0; i < length; i++){\n            Subscription memory currentSubscription;\n\n            currentSubscription = subscriptions[i];\n\n            usernames[i] = currentSubscription.UserName;\n            topics[i] = currentSubscription.Topic;\n            mailids[i] = currentSubscription.MailId;\n        }\n\n        return (usernames, topics, mailids);\n    }\n}\n',
        sourcePath: '/home/nagendra/solidity/Pubsubhandle/contracts/PubContracts.sol',
        ast: [Object],
        compiler: [Object],
        networks: [Object],
        schemaVersion: '1.0.1',
        updatedAt: '2017-11-16T11:01:44.707Z' },
     setProvider: [Function: bound setProvider],
     new: [Function: bound new],
     at: [Function: bound at],
     deployed: [Function: bound deployed],
     defaults: [Function: bound defaults],
     hasNetwork: [Function: bound hasNetwork],
     isDeployed: [Function: bound isDeployed],
     detectNetwork: [Function: bound detectNetwork],
     setNetwork: [Function: bound setNetwork],
     resetAddress: [Function: bound resetAddress],
     link: [Function: bound link],
     clone: [Function: bound clone],
     addProp: [Function: bound addProp],
     toJSON: [Function: bound toJSON],
     web3:
      Web3 {
        _requestManager: [Object],
        currentProvider: [Object],
        eth: [Object],
        db: [Object],
        shh: [Object],
        net: [Object],
        personal: [Object],
        bzz: [Object],
        settings: [Object],
        version: [Object],
        providers: [Object],
        _extend: [Object] },
     class_defaults:
      { from: '0x8d378315dba48778cee817953c868535a4646ad0',
        gas: 6712390,
        gasPrice: 100000000000 },
     currentProvider:
      HttpProvider {
        host: 'http://localhost:8545',
        timeout: 0,
        send: [Function],
        sendAsync: [Function],
        _alreadyWrapped: true },
     network_id: '1510830094264' },
  abi:
   [ { constant: true,
       inputs: [],
       name: 'getSubscriptionDetails',
       outputs: [Object],
       payable: false,
       stateMutability: 'view',
       type: 'function' },
     { constant: true,
       inputs: [Object],
       name: 'subscriptions',
       outputs: [Object],
       payable: false,
       stateMutability: 'view',
       type: 'function' },
     { constant: false,
       inputs: [Object],
       name: 'addSubscription',
       outputs: [Object],
       payable: false,
       stateMutability: 'nonpayable',
       type: 'function' } ],
  contract:
   Contract {
     _eth:
      Eth {
        _requestManager: [Object],
        getBalance: [Object],
        getStorageAt: [Object],
        getCode: [Object],
        getBlock: [Object],
        getUncle: [Object],
        getCompilers: [Object],
        getBlockTransactionCount: [Object],
        getBlockUncleCount: [Object],
        getTransaction: [Object],
        getTransactionFromBlock: [Object],
        getTransactionReceipt: [Object],
        getTransactionCount: [Object],
        call: [Object],
        estimateGas: [Object],
        sendRawTransaction: [Object],
        signTransaction: [Object],
        sendTransaction: [Object],
        sign: [Object],
        compile: [Object],
        submitWork: [Object],
        getWork: [Object],
        coinbase: [Getter],
        getCoinbase: [Object],
        mining: [Getter],
        getMining: [Object],
        hashrate: [Getter],
        getHashrate: [Object],
        syncing: [Getter],
        getSyncing: [Object],
        gasPrice: [Getter],
        getGasPrice: [Object],
        accounts: [Getter],
        getAccounts: [Object],
        blockNumber: [Getter],
        getBlockNumber: [Object],
        protocolVersion: [Getter],
        getProtocolVersion: [Object],
        iban: [Object],
        sendIBANTransaction: [Function: bound transfer] },
     transactionHash: null,
     address: '0x396474e12e54eef693c6045d4c366c57478c401f',
     abi: [ [Object], [Object], [Object] ],
     getSubscriptionDetails:
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        '': [Circular] },
     subscriptions:
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        uint256: [Circular] },
     addSubscription:
      { [Function: bound ]
        request: [Function: bound ],
        call: [Function: bound ],
        sendTransaction: [Function: bound ],
        estimateGas: [Function: bound ],
        getData: [Function: bound ],
        'bytes32,bytes32,bytes32': [Circular] },
     allEvents: [Function: bound ] },
  getSubscriptionDetails:
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  subscriptions:
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  addSubscription:
   { [Function]
     call: [Function],
     sendTransaction: [Function],
     request: [Function: bound ],
     estimateGas: [Function] },
  sendTransaction: [Function],
  send: [Function],
  allEvents: [Function: bound ],
  address: '0x396474e12e54eef693c6045d4c366c57478c401f',
  transactionHash: null }
truffle(development)>